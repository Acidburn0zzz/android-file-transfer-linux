{"name":"Android-file-transfer-linux","tagline":"Android File Transfer for Linux","body":"# Android File Transfer For Linux\r\n\r\n[![License](http://img.shields.io/:license-GPLv2-blue.svg)](https://github.com/whoozle/android-file-transfer-linux/blob/master/LICENSE)\r\n[![Version](http://img.shields.io/:version-2.3-green.svg)](https://github.com/whoozle/android-file-transfer-linux/blob/master)\r\n[![Build Status](https://travis-ci.org/whoozle/android-file-transfer-linux.svg?branch=master)](https://travis-ci.org/whoozle/android-file-transfer-linux)\r\n\r\nAndroid File Transfer for Linux — reliable MTP client with minimalistic UI similar to [Android File Transfer for Mac](https://www.android.com/intl/en_us/filetransfer/).\r\n\r\nIt just works™.\r\n\r\n## Do I need it?\r\n\r\nIf you're happy with `gmtp`/`gvfs`/`mtpfs` or any other mtp software, you might not need this software (but give it a try!).\r\n\r\nIf you're suffering from crashes, missing tags and album covers, usb freezes and corrupted files, this software is right for you.\r\n\r\n## Features\r\n\r\n* Simple Qt UI with progress dialogs.\r\n* FUSE wrapper (If you'd prefer mounting your device), supporting partial read/writes, allowing instant access to your files.\r\n* No file size limits.\r\n* Automatically renames album cover to make it visible from media player.\r\n* No extra dependencies (e.g. `libptp`/`libmtp`).\r\n* Available as static/shared library.\r\n* Simple CLI tool.\r\n\r\n## FAQ\r\n##### You're getting «ioctl(_fd, USBDEVFS_CLAIMINTERFACE, &interfaceNumber): Device or resource busy» or «Device is already used by another process» exception/message box right after you started the application. This clearly indicates that some other process is accessing MTP device right now.\r\nYou could do the following steps to find it:\r\n* Open you console emulator (gnome-terminal, konsole, whatever) and type: ```lsusb``` (sudo apt-get install usbutils if it did not start) and find your device in its output, for example\r\n```\r\nBus 006 Device 070: ID 18d1:4ee2 Google Inc. Nexus 4 (debug)\r\n```\r\n* Start fuser ```sudo fuser /dev/bus/usb/<BUS>/<DEVICE>``` (sudo apt-get install psmisc if it did not start)\r\n* It should output something like this: ```/dev/bus/usb/006/070: 23253 24377``` (actually, there could be more of them after semicolon, like : 24377, 24378, …) so, 23253 and 24377 are the pids of the processes which opened your device.\r\n* So, finally run:\r\n```\r\nps -x -q 23253\r\n23253 ?        Sl     0:00 /usr/local/bin/android-file-transfer\r\nps -x -q 24377\r\n24377 ?        Sl    21:14 adb -P 5037 fork-server server\r\n```\r\nUsually, adb is not offending process, because it uses another interface, so the /usr/local/bin/android-file-transfer is the one\r\n\r\n\r\n## Building instructions\r\n\r\n### Prerequisites\r\n\r\n* You will need qt libraries for building ui program. If you want to use only library (*Qt is not needed*), you could turn the option ```BUILD_QT_UI``` off.\r\n* For ubuntu and other debian-based distros use the following command:\r\n\r\n  ```shell\r\n  sudo apt-get install build-essential cmake libqt4-dev ninja-build libfuse-dev\r\n  ```\r\n* Basically, you need `libqtX-dev` for UI, `libfuse-dev` for FUSE interface, `cmake`, `ninja` or `make` for building the project. You could use libqt5-dev as well.\r\n\r\n### Building with ninja\r\n\r\n```shell\r\nmkdir build\r\ncd build\r\ncmake -G Ninja ..\r\nninja\r\n\r\n./qt/android-file-transfer\r\n```\r\n\r\n### Building with make\r\n\r\n```shell\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake\r\n\r\n./qt/android-file-transfer\r\n```\r\n\r\n### Installation\r\n\r\n`sudo ninja install` or `sudo make install` will install program into cmake prefix/bin directory (usually /usr/local/bin)\r\n\r\n\r\n## How to use\r\n\r\n### FUSE interface\r\n\r\n```shell\r\nmkdir ~/my-device\r\n./aft-mtp-mount ~/my-device\r\n```\r\nRemember, if you want album art to be displayed, it must be named 'albumart.xxx' and placed *first* in the destination folder. Then copy other files.\r\nAlso, note that fuse could be 7-8 times slower than ui/cli file transfer.\r\n\r\n### QT user interface\r\n\r\n1. Start application, choose destination folder and click any button on toolbar.\r\n\r\n2. The options available there are: `Upload Album`, `Upload Directory` and `Upload Files`.\r\n   The latter two are self-explanatory. `Upload album` tries searching source directory for album cover and sets best available cover.\r\n\r\n3. You could drop any files or folders right into application window, the transfer will start automatically.\r\n\r\n### Known problems\r\n\r\n* Samsung removed android extensions from MTP, so fuse will be available readonly, sorry. Feel free to post your complaints to http://developer.samsung.com/forum/en\r\n* Sometimes downloading fails with usb timeout, then phone becomes unresponsive. [Android bug #75259](https://code.google.com/p/android/issues/detail?id=75259)\r\n* Objects created in UI will not show up in FUSE filesystem. [Android bug #169547](https://code.google.com/p/android/issues/detail?id=169547)\r\n\r\nThe actual list of all known problems and bugs available [here](https://github.com/whoozle/android-file-transfer-linux/issues)\r\n\r\n## License\r\n\r\nAndroid File Transfer for Linux is released under [GNU GPLv2 License](https://github.com/whoozle/android-file-transfer-linux/blob/master/LICENSE).\r\n\r\nCopyright © 2015 Vladimir Menshakov\r\n","google":"UA-15578013-1","note":"Don't delete this file! It's used internally to help with page regeneration."}